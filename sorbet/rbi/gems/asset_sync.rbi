# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/asset_sync/all/asset_sync.rbi
#
# asset_sync-2.11.0

module AssetSync
  def self.clean; end
  def self.config; end
  def self.config=(data); end
  def self.configure(&proc); end
  def self.enabled?; end
  def self.log(msg); end
  def self.reset_config!; end
  def self.stderr; end
  def self.stdout; end
  def self.storage; end
  def self.sync; end
  def self.warn(msg); end
  def self.with_config(&block); end
end
class AssetSync::Config
  def __callbacks; end
  def __callbacks?; end
  def _run_validate_callbacks(&block); end
  def _validate_callbacks; end
  def _validators; end
  def _validators?; end
  def add_local_file_paths(&block); end
  def additional_local_file_paths; end
  def additional_local_file_paths_procs; end
  def always_upload; end
  def always_upload=(arg0); end
  def assets_prefix; end
  def aws?; end
  def aws_access_key_id; end
  def aws_access_key_id=(arg0); end
  def aws_iam?; end
  def aws_iam_roles; end
  def aws_iam_roles=(arg0); end
  def aws_reduced_redundancy; end
  def aws_reduced_redundancy=(arg0); end
  def aws_rrs?; end
  def aws_secret_access_key; end
  def aws_secret_access_key=(arg0); end
  def aws_signature_version; end
  def aws_signature_version=(arg0); end
  def azure_rm?; end
  def azure_storage_access_key; end
  def azure_storage_access_key=(arg0); end
  def azure_storage_account_name; end
  def azure_storage_account_name=(arg0); end
  def cache_asset_regexp=(cache_asset_regexp); end
  def cache_asset_regexps; end
  def cache_asset_regexps=(arg0); end
  def cdn_distribution_id; end
  def cdn_distribution_id=(arg0); end
  def concurrent_uploads; end
  def concurrent_uploads=(arg0); end
  def concurrent_uploads_max_threads; end
  def concurrent_uploads_max_threads=(arg0); end
  def custom_headers; end
  def custom_headers=(arg0); end
  def default_manifest_directory; end
  def enabled; end
  def enabled=(arg0); end
  def enabled?; end
  def existing_remote_files; end
  def existing_remote_files=(arg0); end
  def existing_remote_files?; end
  def fail_silently; end
  def fail_silently=(arg0); end
  def fail_silently?; end
  def file_ext_to_mime_type_overrides; end
  def fog_directory; end
  def fog_directory=(arg0); end
  def fog_host; end
  def fog_host=(arg0); end
  def fog_options; end
  def fog_path_style; end
  def fog_path_style=(arg0); end
  def fog_port; end
  def fog_port=(arg0); end
  def fog_provider; end
  def fog_provider=(arg0); end
  def fog_public; end
  def fog_public=(new_val); end
  def fog_region; end
  def fog_region=(arg0); end
  def fog_scheme; end
  def fog_scheme=(arg0); end
  def google?; end
  def google_interop?; end
  def google_json_key_location; end
  def google_json_key_location=(arg0); end
  def google_project; end
  def google_project=(arg0); end
  def google_service_account?; end
  def google_storage_access_key_id; end
  def google_storage_access_key_id=(arg0); end
  def google_storage_secret_access_key; end
  def google_storage_secret_access_key=(arg0); end
  def gzip?; end
  def gzip_compression; end
  def gzip_compression=(arg0); end
  def ignored_files; end
  def ignored_files=(arg0); end
  def include_manifest; end
  def include_manifest=(arg0); end
  def initialize; end
  def invalidate; end
  def invalidate=(arg0); end
  def load_yml!; end
  def log_silently; end
  def log_silently=(arg0); end
  def log_silently?; end
  def manifest; end
  def manifest=(arg0); end
  def manifest_path; end
  def model_name(*args, &block); end
  def prefix; end
  def prefix=(arg0); end
  def public_path; end
  def public_path=(path); end
  def rackspace?; end
  def rackspace_api_key; end
  def rackspace_api_key=(arg0); end
  def rackspace_auth_url; end
  def rackspace_auth_url=(arg0); end
  def rackspace_username; end
  def rackspace_username=(arg0); end
  def remote_file_list_cache_file_path; end
  def remote_file_list_cache_file_path=(arg0); end
  def run_on_precompile; end
  def run_on_precompile=(arg0); end
  def self.__callbacks; end
  def self.__callbacks=(val); end
  def self.__callbacks?; end
  def self._validate_callbacks; end
  def self._validate_callbacks=(value); end
  def self._validators; end
  def self._validators=(val); end
  def self._validators?; end
  def validation_context; end
  def validation_context=(arg0); end
  def yml; end
  def yml_exists?; end
  def yml_path; end
  extend ActiveModel::Callbacks
  extend ActiveModel::Naming
  extend ActiveModel::Translation
  extend ActiveModel::Validations::ClassMethods
  extend ActiveModel::Validations::HelperMethods
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  include ActiveModel::Validations
  include ActiveModel::Validations::HelperMethods
  include ActiveSupport::Callbacks
end
class AssetSync::Config::Invalid < StandardError
end
class AssetSync::Config::FileExtToMimeTypeOverrides
  def add(ext, mime_type); end
  def clear; end
  def fetch(key); end
  def initialize; end
  def key?(key); end
end
class AssetSync::Config::FogPublicValue
  def initialize(val); end
  def to_bool; end
  def use_explicit_value?; end
end
class AssetSync::MultiMime
  def self.lookup(ext); end
end
class AssetSync::Storage
  def always_upload_files; end
  def bucket; end
  def config; end
  def config=(arg0); end
  def connection; end
  def delete_extra_remote_files; end
  def delete_file(f, remote_files_to_delete); end
  def expand_file_names(names); end
  def files_to_invalidate; end
  def files_with_custom_headers; end
  def get_asset_files_from_manifest; end
  def get_local_files; end
  def get_manifest_path; end
  def get_non_fingerprinted(files); end
  def get_remote_files; end
  def ignore_existing_remote_files?; end
  def ignored_files; end
  def initialize(cfg); end
  def keep_existing_remote_files?; end
  def local_files; end
  def log(msg); end
  def path; end
  def remote_file_list_cache_file_path; end
  def remote_files; end
  def sync; end
  def update_remote_file_list_cache(local_files_to_upload); end
  def upload_file(f); end
  def upload_files; end
end
class AssetSync::Storage::BucketNotFound < StandardError
end
class Rails::Railtie::Configuration
  def asset_sync; end
end
class AssetSync::Engine < Rails::Engine
end
