# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/notifications-ruby-client/all/notifications-ruby-client.rbi
#
# notifications-ruby-client-5.1.2

module Notifications
  def self.prepare_upload(file); end
end
class Notifications::Client
  def base_url(*args, &block); end
  def base_url=(*args, &block); end
  def generate_template_preview(id, options = nil); end
  def get_all_templates(options = nil); end
  def get_notification(id); end
  def get_notifications(options = nil); end
  def get_pdf_for_letter(id); end
  def get_received_texts(options = nil); end
  def get_template_by_id(id, options = nil); end
  def get_template_version(id, version, options = nil); end
  def initialize(*args); end
  def secret_token(*args, &block); end
  def send_email(args); end
  def send_letter(args); end
  def send_precompiled_letter(reference, pdf_file, postage = nil); end
  def send_sms(args); end
  def service_id(*args, &block); end
  def speaker; end
  extend Forwardable
end
class Notifications::Client::RequestError < StandardError
  def body; end
  def build_message; end
  def code; end
  def initialize(response); end
  def parse_body(body); end
end
class Notifications::Client::ClientError < Notifications::Client::RequestError
end
class Notifications::Client::BadRequestError < Notifications::Client::ClientError
end
class Notifications::Client::AuthError < Notifications::Client::ClientError
end
class Notifications::Client::NotFoundError < Notifications::Client::ClientError
end
class Notifications::Client::RateLimitError < Notifications::Client::ClientError
end
class Notifications::Client::ServerError < Notifications::Client::RequestError
end
module Notifications::Client::ErrorHandling
  def build_error(response); end
  def error_class_for_code(code); end
end
class Notifications::Client::Speaker
  def base_url; end
  def get(id = nil, options = nil); end
  def get_pdf_for_letter(id); end
  def get_with_url(url, options = nil); end
  def headers; end
  def initialize(secret_token = nil, base_url = nil); end
  def jwt_token; end
  def open(request); end
  def perform_request!(request); end
  def post(kind, form_data); end
  def post_precompiled_letter(reference, pdf_file, postage = nil); end
  def post_with_url(url, form_data); end
  def secret_token; end
  def service_id; end
  def validate_uuids!; end
  include Notifications::Client::ErrorHandling
end
class Notifications::Client::Notification
  def body; end
  def completed_at; end
  def created_at; end
  def created_by_name; end
  def email_address; end
  def id; end
  def initialize(notification); end
  def line_1; end
  def line_2; end
  def line_3; end
  def line_4; end
  def line_5; end
  def line_6; end
  def phone_number; end
  def postage; end
  def postcode; end
  def reference; end
  def sent_at; end
  def status; end
  def subject; end
  def template; end
  def type; end
end
class Notifications::Client::ResponseNotification
  def content; end
  def id; end
  def initialize(notification); end
  def reference; end
  def template; end
  def uri; end
end
class Notifications::Client::ResponsePrecompiledLetter
  def id; end
  def initialize(notification); end
  def postage; end
  def reference; end
end
class Notifications::Client::NotificationsCollection
  def collection; end
  def collection_from(notifications); end
  def initialize(response); end
  def links; end
end
class Notifications::Client::ReceivedText
  def content; end
  def created_at; end
  def id; end
  def initialize(received_text); end
  def notify_number; end
  def service_id; end
  def user_number; end
end
class Notifications::Client::ReceivedTextCollection
  def collection; end
  def collection_from(received_texts); end
  def initialize(response); end
  def links; end
end
class Notifications::Client::Template
  def body; end
  def created_at; end
  def created_by; end
  def id; end
  def initialize(notification); end
  def name; end
  def subject; end
  def type; end
  def updated_at; end
  def version; end
end
class Notifications::Client::TemplateCollection
  def collection; end
  def collection_from(templates); end
  def initialize(response); end
end
class Notifications::Client::TemplatePreview
  def body; end
  def html; end
  def id; end
  def initialize(notification); end
  def subject; end
  def type; end
  def version; end
end
class Notifications::UuidValidator
  def initialize(uuid); end
  def self.validate!(uuid, contextual_message = nil); end
  def uuid; end
  def uuid=(arg0); end
  def valid?; end
end
