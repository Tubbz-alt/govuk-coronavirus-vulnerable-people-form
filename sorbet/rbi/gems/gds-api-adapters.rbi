# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/gds-api-adapters/all/gds-api-adapters.rbi
#
# gds-api-adapters-67.0.0

module GdsApi
  def self.asset_manager(options = nil); end
  def self.calendars(options = nil); end
  def self.content_store(options = nil); end
  def self.email_alert_api(options = nil); end
  def self.imminence(options = nil); end
  def self.licence_application(options = nil); end
  def self.link_checker_api(options = nil); end
  def self.local_links_manager(options = nil); end
  def self.mapit(options = nil); end
  def self.maslow(options = nil); end
  def self.organisations(options = nil); end
  def self.publishing_api(options = nil); end
  def self.router(options = nil); end
  def self.search(options = nil); end
  def self.support(options = nil); end
  def self.support_api(options = nil); end
  def self.worldwide(options = nil); end
end
class GdsApi::GovukHeaders
  def self.clear_headers; end
  def self.header_data; end
  def self.headers; end
  def self.set_header(header_name, value); end
end
class GdsApi::GovukHeaderSniffer
  def call(env); end
  def initialize(app, header_name); end
  def readable_name; end
end
class GdsApi::Railtie < Rails::Railtie
end
class GdsApi::BaseError < StandardError
  def raven_context; end
end
class GdsApi::EndpointNotFound < GdsApi::BaseError
end
class GdsApi::TimedOutException < GdsApi::BaseError
end
class GdsApi::InvalidUrl < GdsApi::BaseError
end
class GdsApi::SocketErrorException < GdsApi::BaseError
end
class GdsApi::HTTPErrorResponse < GdsApi::BaseError
  def code; end
  def code=(arg0); end
  def error_details; end
  def error_details=(arg0); end
  def initialize(code, message = nil, error_details = nil); end
end
class GdsApi::HTTPClientError < GdsApi::HTTPErrorResponse
end
class GdsApi::HTTPIntermittentClientError < GdsApi::HTTPClientError
end
class GdsApi::HTTPNotFound < GdsApi::HTTPClientError
end
class GdsApi::HTTPGone < GdsApi::HTTPClientError
end
class GdsApi::HTTPPayloadTooLarge < GdsApi::HTTPClientError
end
class GdsApi::HTTPUnauthorized < GdsApi::HTTPClientError
end
class GdsApi::HTTPForbidden < GdsApi::HTTPClientError
end
class GdsApi::HTTPConflict < GdsApi::HTTPClientError
end
class GdsApi::HTTPUnprocessableEntity < GdsApi::HTTPClientError
end
class GdsApi::HTTPTooManyRequests < GdsApi::HTTPIntermittentClientError
end
class GdsApi::HTTPServerError < GdsApi::HTTPErrorResponse
end
class GdsApi::HTTPIntermittentServerError < GdsApi::HTTPServerError
end
class GdsApi::HTTPInternalServerError < GdsApi::HTTPServerError
end
class GdsApi::HTTPBadGateway < GdsApi::HTTPIntermittentServerError
end
class GdsApi::HTTPUnavailable < GdsApi::HTTPIntermittentServerError
end
class GdsApi::HTTPGatewayTimeout < GdsApi::HTTPIntermittentServerError
end
module GdsApi::ExceptionHandling
  def build_specific_http_error(error, url, details = nil); end
  def error_class_for_code(code); end
end
class GdsApi::Response
  def <=>(*args, &block); end
  def [](*args, &block); end
  def blank?; end
  def cache_control; end
  def code; end
  def dig(*args, &block); end
  def each(*args, &block); end
  def expires_at; end
  def expires_in; end
  def headers; end
  def initialize(http_response, options = nil); end
  def parsed_content; end
  def present?; end
  def raw_response_body; end
  def to_hash; end
  def transform_parsed(value); end
  extend Forwardable
  include Enumerable
end
class GdsApi::JsonClient
  def delete_json(url, params = nil, additional_headers = nil); end
  def do_json_request(method, url, params = nil, additional_headers = nil, &create_response); end
  def do_raw_request(method, url, params = nil); end
  def do_request(method, url, params = nil, additional_headers = nil); end
  def get_json(url, additional_headers = nil, &create_response); end
  def get_raw!(url); end
  def get_raw(url); end
  def initialize(options = nil); end
  def logger; end
  def logger=(arg0); end
  def options; end
  def options=(arg0); end
  def patch_json(url, params, additional_headers = nil); end
  def post_json(url, params = nil, additional_headers = nil); end
  def post_multipart(url, params); end
  def put_json(url, params, additional_headers = nil); end
  def put_multipart(url, params); end
  def self.default_request_headers; end
  def self.default_request_with_json_body_headers; end
  def self.json_body_headers; end
  def with_auth_options(method_params); end
  def with_headers(method_params, default_headers, additional_headers); end
  def with_ssl_options(method_params); end
  def with_timeout(method_params); end
  include GdsApi::ExceptionHandling
end
class GdsApi::ListResponse < GdsApi::Response
  def each(*args, &block); end
  def has_next_page?; end
  def has_previous_page?; end
  def initialize(response, api_client, options = nil); end
  def link_header; end
  def next_page; end
  def page_link(rel); end
  def previous_page; end
  def results; end
  def to_ary(*args, &block); end
  def with_subsequent_pages; end
end
class GdsApi::Base
  def client; end
  def create_client; end
  def delete_json(*args, &block); end
  def endpoint; end
  def endpoint=(arg0); end
  def get_json(*args, &block); end
  def get_list(url); end
  def get_raw!(*args, &block); end
  def get_raw(*args, &block); end
  def initialize(endpoint_url, options = nil); end
  def options; end
  def patch_json(*args, &block); end
  def post_json(*args, &block); end
  def post_multipart(*args, &block); end
  def put_json(*args, &block); end
  def put_multipart(*args, &block); end
  def query_string(params); end
  def self.default_options; end
  def self.default_options=(arg0); end
  def self.logger; end
  def self.logger=(arg0); end
  def url_for_slug(slug, options = nil); end
  extend Forwardable
end
class GdsApi::Base::InvalidAPIURL < StandardError
end
class GdsApi::AssetManager < GdsApi::Base
  def asset(id); end
  def base_url; end
  def create_asset(asset); end
  def create_whitehall_asset(asset); end
  def delete_asset(id); end
  def restore_asset(id); end
  def update_asset(id, asset); end
  def whitehall_asset(legacy_url_path); end
end
class GdsApi::Calendars < GdsApi::Base
  def bank_holidays(division = nil); end
end
class GdsApi::ContentStore < GdsApi::Base
  def content_item(base_path); end
  def content_item_url(base_path); end
  def self.redirect_for_path(content_item, request_path, request_query = nil); end
end
class GdsApi::ContentStore::ItemNotFound < GdsApi::HTTPNotFound
  def self.build_from(http_error); end
end
class GdsApi::ContentStore::RedirectResolver
  def call; end
  def content_item; end
  def initialize(content_item, request_path, request_query = nil); end
  def prefix_destination(redirect, path, query); end
  def redirect_for_path(path); end
  def redirects_by_segments; end
  def request_path; end
  def request_query; end
  def resolve_destination(redirect, path, query); end
  def route_prefix_match?(prefix_path, path_to_match); end
  def self.call(*args); end
  def self.new(*arg0); end
  def status_code(redirect); end
end
class GdsApi::ContentStore::UnresolvedRedirect < GdsApi::BaseError
end
class GdsApi::EmailAlertApi < GdsApi::Base
  def change_subscriber(id:, new_address:); end
  def change_subscription(id:, frequency:); end
  def create_content_change(content_change, headers = nil); end
  def create_email(email_params); end
  def create_message(message, headers = nil); end
  def create_subscriber_list(attributes); end
  def find_or_create_subscriber_list(attributes); end
  def find_subscriber_list(attributes); end
  def get_latest_matching_subscription(id); end
  def get_subscriber_list(slug:); end
  def get_subscription(id); end
  def get_subscriptions(id:, order: nil); end
  def nested_query_string(params); end
  def send_subscriber_verification_email(address:, destination:, redirect: nil); end
  def send_subscription_verification_email(address:, frequency:, topic_id:); end
  def send_unpublish_message(message); end
  def subscribe(subscriber_list_id:, address:, frequency: nil); end
  def topic_matches(attributes); end
  def unsubscribe(uuid); end
  def unsubscribe_subscriber(id); end
end
class GdsApi::Imminence < GdsApi::Base
  def api_url(type, params); end
  def areas_for_postcode(postcode); end
  def areas_for_type(type); end
  def places(type, lat, lon, limit = nil); end
  def places_for_postcode(type, postcode, limit = nil); end
  def places_kml(type); end
  def self.extract_address_hash(place_hash); end
  def self.extract_location_hash(location); end
  def self.parse_place_hash(place_hash); end
end
class GdsApi::LicenceApplication < GdsApi::Base
  def all_licences; end
  def build_licence_url(id, snac_code); end
  def details_for_licence(id, snac_code = nil); end
end
class GdsApi::LinkCheckerApi < GdsApi::Base
  def check(uri, synchronous: nil, checked_within: nil); end
  def create_batch(uris, checked_within: nil, webhook_uri: nil, webhook_secret_token: nil); end
  def get_batch(id); end
  def upsert_resource_monitor(links, app, reference); end
end
class GdsApi::LinkCheckerApi::MonitorReport < SimpleDelegator
  def id; end
end
class GdsApi::LinkCheckerApi::LinkReport < SimpleDelegator
  def checked; end
  def errors; end
  def problem_summary; end
  def status; end
  def suggested_fix; end
  def uri; end
  def warnings; end
end
class GdsApi::LinkCheckerApi::BatchReport < SimpleDelegator
  def completed_at; end
  def id; end
  def links; end
  def status; end
  def totals; end
end
class GdsApi::LocalLinksManager < GdsApi::Base
  def local_authority(authority_slug); end
  def local_link(authority_slug, lgsl, lgil); end
end
class GdsApi::Mapit < GdsApi::Base
  def area_for_code(code_type, code); end
  def areas_for_type(type); end
  def base_url; end
  def location_for_postcode(postcode); end
end
class GdsApi::Mapit::Location
  def areas; end
  def initialize(response); end
  def lat; end
  def lon; end
  def postcode; end
  def response; end
end
class GdsApi::Maslow < GdsApi::Base
  def need_page_url(content_id); end
end
class GdsApi::Organisations < GdsApi::Base
  def base_url; end
  def organisation(organisation_slug); end
  def organisations; end
end
class GdsApi::PublishingApi < GdsApi::Base
  def content_url(content_id, params = nil); end
  def destroy_intent(base_path); end
  def discard_draft(content_id, options = nil); end
  def discard_url(content_id); end
  def get_content(content_id, params = nil); end
  def get_content_items(params); end
  def get_content_items_enum(params); end
  def get_editions(params = nil); end
  def get_editions_url(params); end
  def get_expanded_links(content_id, locale: nil, with_drafts: nil, generate: nil); end
  def get_linkables(document_type: nil); end
  def get_linked_items(content_id, params = nil); end
  def get_links(content_id); end
  def get_links_changes(params); end
  def get_links_for_content_ids(content_ids); end
  def get_live_content(content_id, locale = nil); end
  def get_paged_editions(params = nil); end
  def import(content_id, locale, content_items); end
  def intent_url(base_path); end
  def links_changes_url(params = nil); end
  def links_url(content_id); end
  def lookup_content_id(base_path:, exclude_document_types: nil, exclude_unpublishing_types: nil, with_drafts: nil); end
  def lookup_content_ids(base_paths:, exclude_document_types: nil, exclude_unpublishing_types: nil, with_drafts: nil); end
  def merge_optional_keys(params, options, optional_keys); end
  def patch_links(content_id, params); end
  def paths_url(base_path); end
  def publish(content_id, update_type = nil, options = nil); end
  def publish_url(content_id); end
  def put_content(content_id, payload); end
  def put_intent(base_path, payload); end
  def put_path(base_path, payload); end
  def republish(content_id, options = nil); end
  def republish_url(content_id); end
  def unpublish(content_id, type:, explanation: nil, alternative_path: nil, discard_drafts: nil, allow_draft: nil, previous_version: nil, locale: nil, unpublished_at: nil, redirects: nil); end
  def unpublish_url(content_id); end
  def unreserve_path(base_path, publishing_app); end
  def unreserve_url(base_path); end
  def validate_content_id(content_id); end
end
class GdsApi::PublishingApi::NoLiveVersion < GdsApi::BaseError
end
class GdsApi::Router < GdsApi::Base
  def add_backend(id, url); end
  def add_gone_route(path, type, options = nil); end
  def add_redirect_route(path, type, destination, redirect_type = nil, options = nil); end
  def add_route(path, type, backend_id, options = nil); end
  def commit_routes; end
  def delete_backend(id); end
  def delete_route(path, hard_delete: nil, commit: nil); end
  def get_backend(id); end
  def get_route(path); end
end
class GdsApi::Search < GdsApi::Base
  def add_document(*args); end
  def base_url; end
  def batch_search(searches, additional_headers = nil); end
  def delete_content(base_path); end
  def delete_document(*args); end
  def documents_url; end
  def get_content(base_path); end
  def initialize(endpoint_url, options = nil); end
  def search(args, additional_headers = nil); end
  def search_enum(args, page_size: nil, additional_headers: nil); end
end
class GdsApi::Search::V1 < SimpleDelegator
  def add_document(type, id, document); end
  def delete_document(type, id); end
end
class GdsApi::Search::V2 < SimpleDelegator
  def add_document(id, document, index_name); end
  def delete_document(id, index_name); end
end
class GdsApi::Search::V2::InvalidIndex < StandardError
end
class GdsApi::Search::UnknownAPIVersion < StandardError
end
class GdsApi::Support < GdsApi::Base
  def base_url; end
  def create_foi_request(request_details); end
  def create_named_contact(request_details); end
  def feedback_url(slug); end
end
class GdsApi::SupportApi < GdsApi::Base
  def anonymous_feedback(params = nil); end
  def create_anonymous_long_form_contact(request_details); end
  def create_content_improvement_feedback(params); end
  def create_feedback_export_request(request_details); end
  def create_global_export_request(request_details); end
  def create_page_improvement(params); end
  def create_problem_report(request_details); end
  def create_service_feedback(request_details); end
  def document_type_list; end
  def document_type_summary(document_type, options = nil); end
  def feedback_by_day(date, page = nil, per_page = nil); end
  def feedback_export_request(id); end
  def mark_reviewed_for_spam(request_details); end
  def organisation(organisation_slug); end
  def organisation_summary(organisation_slug, options = nil); end
  def organisations_list; end
  def problem_report_daily_totals_for(date); end
  def problem_reports(options = nil); end
end
class GdsApi::Worldwide < GdsApi::Base
  def base_url; end
  def organisations_for_world_location(location_slug); end
  def world_location(location_slug); end
  def world_locations; end
end
