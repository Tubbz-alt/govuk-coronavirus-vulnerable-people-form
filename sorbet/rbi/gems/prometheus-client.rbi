# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/prometheus-client/all/prometheus-client.rbi
#
# prometheus-client-2.0.0

module Prometheus
end
module Prometheus::Client
  def self.config; end
  def self.registry; end
end
class Prometheus::Client::LabelSetValidator
  def expected_labels; end
  def initialize(expected_labels:, reserved_labels: nil); end
  def keys_match?(labelset); end
  def reserved_labels; end
  def validate_labelset!(labelset); end
  def validate_name(key); end
  def validate_reserved_key(key); end
  def validate_symbol(key); end
  def validate_symbols!(labels); end
end
class Prometheus::Client::LabelSetValidator::LabelSetError < StandardError
end
class Prometheus::Client::LabelSetValidator::InvalidLabelSetError < Prometheus::Client::LabelSetValidator::LabelSetError
end
class Prometheus::Client::LabelSetValidator::InvalidLabelError < Prometheus::Client::LabelSetValidator::LabelSetError
end
class Prometheus::Client::LabelSetValidator::ReservedLabelError < Prometheus::Client::LabelSetValidator::LabelSetError
end
class Prometheus::Client::Metric
  def docstring; end
  def get(labels: nil); end
  def init_label_set(labels); end
  def initialize(name, docstring:, labels: nil, preset_labels: nil, store_settings: nil); end
  def label_set_for(labels); end
  def name; end
  def preset_labels; end
  def reserved_labels; end
  def stringify_values(labels); end
  def validate_docstring(docstring); end
  def validate_name(name); end
  def values; end
  def with_labels(labels); end
end
class Prometheus::Client::Counter < Prometheus::Client::Metric
  def increment(by: nil, labels: nil); end
  def type; end
end
class Prometheus::Client::Summary < Prometheus::Client::Metric
  def get(labels: nil); end
  def init_label_set(labels); end
  def observe(value, labels: nil); end
  def reserved_labels; end
  def type; end
  def values; end
end
class Prometheus::Client::Gauge < Prometheus::Client::Metric
  def decrement(by: nil, labels: nil); end
  def increment(by: nil, labels: nil); end
  def set(value, labels: nil); end
  def type; end
end
class Prometheus::Client::Histogram < Prometheus::Client::Metric
  def accumulate_buckets(h); end
  def buckets; end
  def get(labels: nil); end
  def init_label_set(labels); end
  def initialize(name, docstring:, labels: nil, preset_labels: nil, buckets: nil, store_settings: nil); end
  def observe(value, labels: nil); end
  def reserved_labels; end
  def sorted?(bucket); end
  def type; end
  def values; end
  def with_labels(labels); end
end
class Prometheus::Client::Registry
  def counter(name, docstring:, labels: nil, preset_labels: nil, store_settings: nil); end
  def exist?(name); end
  def gauge(name, docstring:, labels: nil, preset_labels: nil, store_settings: nil); end
  def get(name); end
  def histogram(name, docstring:, labels: nil, preset_labels: nil, buckets: nil, store_settings: nil); end
  def initialize; end
  def metrics; end
  def register(metric); end
  def summary(name, docstring:, labels: nil, preset_labels: nil, store_settings: nil); end
  def unregister(name); end
end
class Prometheus::Client::Registry::AlreadyRegisteredError < StandardError
end
module Prometheus::Client::DataStores
end
class Prometheus::Client::DataStores::Synchronized
  def for_metric(metric_name, metric_type:, metric_settings: nil); end
  def validate_metric_settings(metric_settings:); end
end
class Prometheus::Client::DataStores::Synchronized::InvalidStoreSettingsError < StandardError
end
class Prometheus::Client::DataStores::Synchronized::MetricStore
  def all_values; end
  def get(labels:); end
  def increment(labels:, by: nil); end
  def initialize; end
  def set(labels:, val:); end
  def synchronize; end
end
class Prometheus::Client::Config
  def data_store; end
  def data_store=(arg0); end
  def initialize; end
end
module Prometheus::Middleware
end
class Prometheus::Middleware::Collector
  def app; end
  def call(env); end
  def init_exception_metrics; end
  def init_request_metrics; end
  def initialize(app, options = nil); end
  def record(env, code, duration); end
  def registry; end
  def strip_ids_from_path(path); end
  def trace(env); end
end
module Prometheus::Client::Formats
end
module Prometheus::Client::Formats::Text
  def self.escape(string, format = nil); end
  def self.histogram(name, set, value); end
  def self.labels(set); end
  def self.marshal(registry); end
  def self.metric(name, labels, value); end
  def self.representation(metric, label_set, value, &block); end
  def self.summary(name, set, value); end
end
class Prometheus::Middleware::Exporter
  def app; end
  def build_dictionary(formats, fallback); end
  def call(env); end
  def extract_quality(attributes, default = nil); end
  def initialize(app, options = nil); end
  def negotiate(env, formats); end
  def not_acceptable(formats); end
  def parse(header); end
  def path; end
  def registry; end
  def respond_with(format); end
end
